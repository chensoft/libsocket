-) the capability of sending raw packet

-) implement unix domain socket only under Unix

-) socket can accept or connect on specific interface according to its name

-) socket support queued data or msg, queued data will be sent after connect success

-) support read, read some, read all, read until separator occur

-) client connect to server via specific port, it's an advance tool

-) client use specific port and address, if host have multiple NICs, but want use specific NIC

-) if multiple ip addresses exist when query dns, socket can polling to connect to a valid address

-) timeout when user connect in but no send any data

-) anti slow packet attack

-) advance dns query(sync and async) methods

-) split host add port in so::socket?

-) accept "host:port" as param name addr when connect, ipv6 is "[fe80::1%lo0]:53"

-) ipv6-only dns query handle

-) specify query v4 or v6 dns only when specify host in connect

-) accept address_vx, port when connect

-) accept host, port when connect

-) allow query protocol port, use ":http" like string to connect

-) use std::future if make an async dns query

-) using mutex to serialize read and write in udp and tcp

-) allow udp connect to a fixed address

-) if udp is connected to a address, then send and recv only allow this address's packets

-) report error if udp already connect to a fixed addr but still send to another address

-) how to add epoll, kqueue?

-) allow multicast and broadcast on socket

-) if client socket is connecting, then still allow reading and writing, if connected then send it immediately

-) deadline is not same as timeout, add deadline support for socket

-) cancel any async operations

-) does closeonexec useful